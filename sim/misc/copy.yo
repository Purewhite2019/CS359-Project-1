                      | # Written by Purewhite: purewhite@sjtu.edu.cn
                      | # Using cdecl
                      | # Since "ret $4" doesn`t works at all,
                      | # we will use "iaddl" to conveniently free the space used by params
                      | 
  0x000:              | .pos 0
  0x000: 30f400010000 |     irmovl stack, %esp
  0x006: 30f500010000 |     irmovl stack, %ebp
  0x00c: 802c000000   |     call Main
  0x011: 00           |     halt
                      | 
  0x014:              | .align 4
  0x014:              | src:
  0x014: 0a000000     |     .long 0x00a
  0x018: b0000000     |     .long 0x0b0
  0x01c: 000c0000     |     .long 0xc00
  0x020:              | dest:
  0x020: 11010000     |     .long 0x111
  0x024: 22020000     |     .long 0x222
  0x028: 33030000     |     .long 0x333
                      | 
  0x02c:              | Main:
                      |     # Function prologue
  0x02c: a05f         |     pushl %ebp
  0x02e: 2045         |     rrmovl %esp, %ebp
                      | 
                      |     # Function body
                      |     # push the params from right to left
  0x030: 30f003000000 |     irmovl $3, %eax
  0x036: a00f         |     pushl %eax
  0x038: 30f020000000 |     irmovl dest, %eax
  0x03e: a00f         |     pushl %eax
  0x040: 30f014000000 |     irmovl src, %eax
  0x046: a00f         |     pushl %eax
                      | 
  0x048: 8058000000   |     call Copy
  0x04d: c0f40c000000 |     iaddl $12, %esp  # "ret $4" doesn`t works at all.
                      |                     # We must use "iaddl" to conveniently free the space used by params
                      | 
                      |     # Function epilogue
  0x053: 2054         | 	rrmovl %ebp,%esp
  0x055: b05f         | 	popl %ebp
  0x057: 90           | 	ret 
                      | 
                      | # int copy(int *src, int *dest, int len): ret(%eax), src(%esi), dest(%edi), len(%ecx)
  0x058:              | Copy:
                      |     # Function prologue
                      |     # Save stack pointers
  0x058: a05f         |     pushl %ebp
  0x05a: 2045         |     rrmovl %esp, %ebp
                      |     # Save callee-save regs
  0x05c: a01f         |     pushl %ecx
  0x05e: a02f         |     pushl %edx
  0x060: a06f         |     pushl %esi
  0x062: a07f         |     pushl %edi
                      |     # pop the params from left to right
                      |     # %esi = src, %edi = dest, %ecx = len
  0x064: 506508000000 |     mrmovl 8(%ebp), %esi
  0x06a: 50750c000000 |     mrmovl 12(%ebp), %edi
  0x070: 501510000000 |     mrmovl 16(%ebp), %ecx
                      | 
                      |     # Function body
                      |     # int result = 0;
  0x076: 6300         |     xorl %eax, %eax
  0x078: 709d000000   |     jmp Copy_test
  0x07d:              | Copy_loop:
                      |     # int val = *src; *dest = val
  0x07d: 502600000000 |     mrmovl (%esi), %edx
  0x083: 402700000000 |     rmmovl %edx, (%edi)
                      | 
                      |     # result ^= val
  0x089: 6320         |     xorl %edx, %eax
                      | 
                      |     # src++; dest++;
  0x08b: 30f204000000 |     irmovl $4, %edx
  0x091: 6026         |     addl %edx, %esi
  0x093: 6027         |     addl %edx, %edi
                      | 
                      |     # len--
  0x095: 30f2ffffffff |     irmovl $-1, %edx
  0x09b: 6021         |     addl %edx, %ecx
  0x09d:              | Copy_test:
                      |     # if(len == 0) return result;
  0x09d: 6211         |     andl %ecx, %ecx
  0x09f: 747d000000   |     jne Copy_loop
                      | 
                      |     # Function epilogue
                      |     # Restore callee-save registers
  0x0a4: a07f         |     pushl %edi
  0x0a6: a06f         |     pushl %esi
  0x0a8: a02f         |     pushl %edx
  0x0aa: a01f         |     pushl %ecx
                      |     # Restore stack pointers
  0x0ac: 2054         |     rrmovl %ebp, %esp
  0x0ae: b05f         |     popl %ebp
  0x0b0: 90           |     ret   # It seems that "ret $Val" doesn`t works at all!
                      | 
  0x100:              | .pos 0x100
  0x100:              | stack:
