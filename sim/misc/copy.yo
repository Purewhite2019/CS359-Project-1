  0x000:              | .pos 0
  0x000: 30f400010000 |     irmovl stack, %esp
  0x006: 30f500010000 |     irmovl stack, %ebp
  0x00c: 802c000000   |     call main
  0x011: 00           |     halt
                      | 
  0x014:              | .align 4
  0x014:              | src:
  0x014: 0a000000     |     .long 0x00a
  0x018: b0000000     |     .long 0x0b0
  0x01c: 000c0000     |     .long 0xc00
  0x020:              | dest:
  0x020: 11010000     |     .long 0x111
  0x024: 22020000     |     .long 0x222
  0x028: 33030000     |     .long 0x333
                      | 
  0x02c:              | main:
  0x02c: 30f614000000 |     irmovl src, %esi
  0x032: 30f720000000 |     irmovl dest, %edi
  0x038: 30f103000000 |     irmovl $3, %ecx
  0x03e: 8044000000   |     call copy
  0x043: 90           |     ret
                      | 
                      | # int copy(int *src, int *dest, int len): ret(%eax), src(%esi), dest(%edi), len(%ecx)
  0x044:              | copy:
                      |     # int result = 0;
  0x044: 6300         |     xorl %eax, %eax
  0x046: 706b000000   |     jmp test
  0x04b:              | loop:
                      |     # int val = *src; *dest = val
  0x04b: 502600000000 |     mrmovl (%esi), %edx
  0x051: 402700000000 |     rmmovl %edx, (%edi)
                      | 
                      |     # result ^= val
  0x057: 6320         |     xorl %edx, %eax
                      | 
                      |     # src++; dest++;
  0x059: 30f204000000 |     irmovl $4, %edx
  0x05f: 6026         |     addl %edx, %esi
  0x061: 6027         |     addl %edx, %edi
                      | 
                      |     # len--
  0x063: 30f2ffffffff |     irmovl $-1, %edx
  0x069: 6021         |     addl %edx, %ecx
  0x06b:              | test:
                      |     # if(len == 0) return result;
  0x06b: 6211         |     andl %ecx, %ecx
  0x06d: 744b000000   |     jne loop
  0x072: 90           |     ret
                      | 
  0x100:              | .pos 0x100
  0x100:              | stack:
