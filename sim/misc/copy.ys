# Written by Purewhite: purewhite@sjtu.edu.cn
# Using cdecl
# Since "ret $4" doesn`t works at all,
# we will use "iaddl" to conveniently free the space used by params

.pos 0
    irmovl stack, %esp
    irmovl stack, %ebp
    call Main
    halt

.align 4
src:
    .long 0x00a
    .long 0x0b0
    .long 0xc00
dest:
    .long 0x111
    .long 0x222
    .long 0x333

Main:
    # Function prologue
    pushl %ebp
    rrmovl %esp, %ebp

    # Function body
    # push the params from right to left
    irmovl $3, %eax
    pushl %eax
    irmovl dest, %eax
    pushl %eax
    irmovl src, %eax
    pushl %eax

    call Copy
    iaddl $12, %esp  # "ret $4" doesn`t works at all.
                    # We must use "iaddl" to conveniently free the space used by params

    # Function epilogue
	rrmovl %ebp,%esp
	popl %ebp
	ret 

# int copy(int *src, int *dest, int len): ret(%eax), src(%esi), dest(%edi), len(%ecx)
Copy:
    # Function prologue
    # Save stack pointers
    pushl %ebp
    rrmovl %esp, %ebp
    # Save callee-save regs
    pushl %ecx
    pushl %edx
    pushl %esi
    pushl %edi
    # pop the params from left to right
    # %esi = src, %edi = dest, %ecx = len
    mrmovl 8(%ebp), %esi
    mrmovl 12(%ebp), %edi
    mrmovl 16(%ebp), %ecx

    # Function body
    # int result = 0;
    xorl %eax, %eax
    jmp Copy_test
Copy_loop:
    # int val = *src; *dest = val
    mrmovl (%esi), %edx
    rmmovl %edx, (%edi)

    # result ^= val
    xorl %edx, %eax

    # src++; dest++;
    irmovl $4, %edx
    addl %edx, %esi
    addl %edx, %edi

    # len--
    irmovl $-1, %edx
    addl %edx, %ecx
Copy_test:
    # if(len == 0) return result;
    andl %ecx, %ecx
    jne Copy_loop

    # Function epilogue
    # Restore callee-save registers
    pushl %edi
    pushl %esi
    pushl %edx
    pushl %ecx
    # Restore stack pointers
    rrmovl %ebp, %esp
    popl %ebp
    ret   # It seems that "ret $Val" doesn`t works at all!

.pos 0x100
stack:
