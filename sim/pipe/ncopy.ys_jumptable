#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %esi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-10, %edx
	jl HandleLeft

Loop:	
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddl $1, %eax		# count++

Npos1:
	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddl $1, %eax		# count++

Npos2:
	mrmovl 8(%ebx), %esi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos3		# if so, goto Npos3:
	iaddl $1, %eax		# count++

Npos3:
	mrmovl 12(%ebx), %esi	# read val from src...
	rmmovl %esi, 12(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos4		# if so, goto Npos4:
	iaddl $1, %eax		# count++

Npos4:
	mrmovl 16(%ebx), %esi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos5		# if so, goto Npos5:
	iaddl $1, %eax		# count++

Npos5:
	mrmovl 20(%ebx), %esi	# read val from src...
	rmmovl %esi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos6		# if so, goto Npos6:
	iaddl $1, %eax		# count++

Npos6:
	mrmovl 24(%ebx), %esi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos7		# if so, goto Npos7:
	iaddl $1, %eax		# count++

Npos7:
	mrmovl 28(%ebx), %esi	# read val from src...
	rmmovl %esi, 28(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos8		# if so, goto Npos8:
	iaddl $1, %eax		# count++

Npos8:
	mrmovl 32(%ebx), %esi	# read val from src...
	rmmovl %esi, 32(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos9		# if so, goto Npos9:
	iaddl $1, %eax		# count++

Npos9:
	mrmovl 36(%ebx), %esi	# read val from src...
	rmmovl %esi, 36(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddl $1, %eax		# count++

Npos:
	iaddl $40, %ebx		# src+=10
	iaddl $40, %ecx		# dst+=10
	iaddl $-10, %edx
	jge Loop

HandleLeft:
	addl %edx, %edx
	addl %edx, %edx
	mrmovl End(%edx), %esi
	pushl %esi
	ret

L9:
	mrmovl 32(%ebx), %esi	# read val from src...
	rmmovl %esi, 32(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L8		# if so, goto L8:
	iaddl $1, %eax		# count++

L8:
	mrmovl 28(%ebx), %esi	# read val from src...
	rmmovl %esi, 28(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L7		# if so, goto L7:
	iaddl $1, %eax		# count++

L7:
	mrmovl 24(%ebx), %esi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L6		# if so, goto L6:
	iaddl $1, %eax		# count++

L6:
	mrmovl 20(%ebx), %esi	# read val from src...
	rmmovl %esi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L5		# if so, goto L5:
	iaddl $1, %eax		# count++

L5:
	mrmovl 16(%ebx), %esi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L4		# if so, goto L4:
	iaddl $1, %eax		# count++

L4:
	mrmovl 12(%ebx), %esi	# read val from src...
	rmmovl %esi, 12(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L3		# if so, goto L3:
	iaddl $1, %eax		# count++

L3:
	mrmovl 8(%ebx), %esi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L2		# if so, goto L2:
	iaddl $1, %eax		# count++

L2:
	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle L1		# if so, goto L1:
	iaddl $1, %eax		# count++

L1:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Done		# if so, goto Done:
	iaddl $1, %eax		# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %esi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
.align 4
	.long Done
	.long L1
	.long L2
	.long L3
	.long L4
	.long L5
	.long L6
	.long L7
	.long L8
	.long L9
End:
#/* $end ncopy-ys */
