#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $4, %eax		# src and dst have 4 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Author: Qi Liu(519021910529)
#
# Modification:
#	1) Added iaddl instruction and used that in the program.
#	2) 12 Loop unrolling
#	3) Reordered some instructions to remove redundant ones.
#	4) In Unrolled 12-Loop , seperate the load into %esi and use of %esi by mixing with %edi.
#	5) In the remaining part, use jump table to handle
#	6) In the remaining part, seperate code according to whether the number of remaining elements is even and odd.
#	7) Added a forwarding from the CC in EX stage to IF stage when instr in ID stage doesn`t influence CC, idea from Ziqi Zhao and Yimin Zhao.
#
# Pity:
#	1) Delay slot is unable because other test cases can`t be adjusted to it.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop_1 header
	# xorl %eax,%eax		# count = 0;
	iaddl $-12, %edx
	jl Loop_12_Exit		# if(%edx - 8 <= 0) goto Loop_12_Exit

Loop_12:
	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, (%ecx)	# ...and store it to dst
	jle Loop_12_Npos_1
	iaddl $1, %eax
Loop_12_Npos_1:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_2
	iaddl $1, %eax

Loop_12_Npos_2:
	mrmovl 8(%ebx), %esi	# read val from src...
	mrmovl 12(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_3
	iaddl $1, %eax
Loop_12_Npos_3:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 12(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_4
	iaddl $1, %eax

Loop_12_Npos_4:
	mrmovl 16(%ebx), %esi	# read val from src...
	mrmovl 20(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_5
	iaddl $1, %eax
Loop_12_Npos_5:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 20(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_6
	iaddl $1, %eax

Loop_12_Npos_6:
	mrmovl 24(%ebx), %esi	# read val from src...
	mrmovl 28(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_7
	iaddl $1, %eax
Loop_12_Npos_7:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 28(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_8
	iaddl $1, %eax

Loop_12_Npos_8:
	mrmovl 32(%ebx), %esi	# read val from src...
	mrmovl 36(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 32(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_9
	iaddl $1, %eax
Loop_12_Npos_9:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 36(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_10
	iaddl $1, %eax

Loop_12_Npos_10:
	mrmovl 40(%ebx), %esi	# read val from src...
	mrmovl 44(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 40(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_11
	iaddl $1, %eax
Loop_12_Npos_11:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 44(%ecx)	# ...and store it to dst
	jle Loop_12_Npos_12
	iaddl $1, %eax

Loop_12_Npos_12:
	iaddl $48, %ebx
	iaddl $48, %ecx
	iaddl $-12, %edx
	jge Loop_12

Loop_12_Exit:
	addl %edx, %edx
	addl %edx, %edx		# %edx = 4 * (len - 8)
	mrmovl Table(%edx), %esi
	pushl %esi
	ret

# Handle the number of remaining elements according to whether it is even or odd.
# to maximize code reuse (minimize the space)
# while in the meantime minimizing the load-and-use hazzard to maximize the speed.

# When len is even,
Remain_10:
	mrmovl 36(%ebx), %esi	# read val from src...
	mrmovl 32(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 36(%ecx)	# ...and store it to dst
	jle Remain_10_Npos_10
	iaddl $1, %eax
Remain_10_Npos_10:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 32(%ecx)	# ...and store it to dst
	jle Remain_8
	iaddl $1, %eax

Remain_8:
	mrmovl 28(%ebx), %esi	# read val from src...
	mrmovl 24(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 28(%ecx)	# ...and store it to dst
	jle Remain_8_Npos_8
	iaddl $1, %eax
Remain_8_Npos_8:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 24(%ecx)	# ...and store it to dst
	jle Remain_6
	iaddl $1, %eax


Remain_6:
	mrmovl 20(%ebx), %esi	# read val from src...
	mrmovl 16(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 20(%ecx)	# ...and store it to dst
	jle Remain_6_Npos_6
	iaddl $1, %eax
Remain_6_Npos_6:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 16(%ecx)	# ...and store it to dst
	jle Remain_4
	iaddl $1, %eax

Remain_4:
	mrmovl 12(%ebx), %esi	# read val from src...
	mrmovl 8(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 12(%ecx)	# ...and store it to dst
	jle Remain_6_Npos_4
	iaddl $1, %eax
Remain_6_Npos_4:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 8(%ecx)	# ...and store it to dst
	jle Remain_2
	iaddl $1, %eax

Remain_2:
	mrmovl 4(%ebx), %esi	# read val from src...
	mrmovl (%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	jle Remain_6_Npos_2
	iaddl $1, %eax
Remain_6_Npos_2:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, (%ecx)	# ...and store it to dst
	jle Done
	iaddl $1, %eax
    jmp Done

# When len is odd,
Remain_11:
	mrmovl 40(%ebx), %esi	# read val from src...
	mrmovl 36(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 40(%ecx)	# ...and store it to dst
	jle Remain_11_Npos
	iaddl $1, %eax
Remain_11_Npos:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 36(%ecx)	# ...and store it to dst
	jle Remain_9
	iaddl $1, %eax

Remain_9:
	mrmovl 32(%ebx), %esi	# read val from src...
	mrmovl 28(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 32(%ecx)	# ...and store it to dst
	jle Remain_9_Npos
	iaddl $1, %eax
Remain_9_Npos:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 28(%ecx)	# ...and store it to dst
	jle Remain_7
	iaddl $1, %eax

Remain_7:
	mrmovl 24(%ebx), %esi	# read val from src...
	mrmovl 20(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	jle Remain_7_Npos_1
	iaddl $1, %eax
Remain_7_Npos_1:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 20(%ecx)	# ...and store it to dst
	jle Remain_5
	iaddl $1, %eax

Remain_5:
	mrmovl 16(%ebx), %esi	# read val from src...
	mrmovl 12(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	jle Remain_7_Npos_3
	iaddl $1, %eax
Remain_7_Npos_3:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 12(%ecx)	# ...and store it to dst
	jle Remain_3
	iaddl $1, %eax

Remain_3:
	mrmovl 8(%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi	# read val from src...
	andl %esi, %esi		# val <= 0?
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	jle Remain_7_Npos_5
	iaddl $1, %eax
Remain_7_Npos_5:
	andl %edi, %edi		# val <= 0?
	rmmovl %edi, 4(%ecx)	# ...and store it to dst
	jle Remain_1
	iaddl $1, %eax

Remain_1:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Done
	iaddl $1, %eax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
	.align 4
	.long Done
	.long Remain_1
	.long Remain_2
	.long Remain_3
	.long Remain_4
	.long Remain_5
	.long Remain_6
	.long Remain_7
	.long Remain_8
	.long Remain_9
	.long Remain_10
	.long Remain_11
Table:

End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long 1
	.long 2
	.long -3
	.long -4
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
