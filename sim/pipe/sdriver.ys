#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $4, %eax		# src and dst have 4 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop_1 header
	xorl %eax,%eax		# count = 0;
	iaddl $-8, %edx
	jle Loop_8_Exit		# if(%edx - 8 <= 0) goto Loop_8_Exit

Loop_8:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_1		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_1:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_2		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_2:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_3		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_3:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_4		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_4:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_5		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_5:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_6		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_6:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_7		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_7:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_8_Npos_8		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_8_Npos_8:
	iaddl $32, %ebx
	iaddl $32, %ecx
	iaddl $-8, %edx
	jg Loop_8			# if((%edx -= 8) <= 0) goto Loop_8_Exit

Loop_8_Exit:
	iaddl $8, %edx		# restore %edx
	je Done				# if(%edx == 0) goto Done
Loop_1:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Loop_1_Npos		# if so, goto Loop_1_Npos:	TODO: delay slot?
	iaddl $1, %eax
Loop_1_Npos:
	iaddl $4, %ebx
	iaddl $4, %ecx
	iaddl $-1, %edx
	jg Loop_1			# if so, goto Loop_1:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long 1
	.long -2
	.long -3
	.long 4
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
